" Write less code!
set nowrap
let g:auto_save = 1
let g:auto_save_events = ["InsertLeave", "TextChanged"]


" Lightline setting
" set noshowmode
" function! LightlineObsessionStatus()
"   return '%{ObsessionStatus()}'
" endfunction
let g:lightline = { 'colorscheme': 'github' } "'component': { 'session': 'LightlineObsessionStatus' } }

" Keep undo history when switching buffers
set hidden


" Aliases
cnoreabbrev Qa qa
cnoreabbrev Wqa wqa
map ; :
map :nt :NERDTree


" Relative Linenumbers
set relativenumber


" Set the colorschemes.
set t_Co=256
colorscheme github



function! StageCommit()
    let l:blist = getbufinfo({'bufloaded': 1, 'buflisted': 1})
    let l:result = []
    for l:item in l:blist
        "skip unnamed buffers; also skip hidden buffers?
        if empty(l:item.name)
            continue
        endif
        call('Git add', shellescape(l:item.name))
    endfor
    return 1
endfunction

" Shortcuts
:command! -nargs=* StageCommit :call StageCommit()
map <Leader>l :ls <Return>
map <Leader>s :StageCommit <Return>
map <Leader>c :G commit <Return>
map <Leader>P :G push <Return>
map <Leader>p :Prosession
map <Leader>g :G <Return>
map <silent> <Leader>d :bd<Return>

" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" let g:coc_snippet_next = '<tab>'
